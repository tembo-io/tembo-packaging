#!/usr/bin/env bash

trap 'exit' ERR
set -E

VERSION=
ARCH=

# usage displays a usage statement.
usage() {
    cat <<EOF
Usage: repackage PACKAGE_NAME [UBUNTU_PACKAGE_NAME]
EOF
}

# arch returns the name of the current CPU architecture. Used in package file
# names.
arch() {
    case "$(uname -p)" in
        aarch64 | arm64)
            echo "arm64"
            ;;
        x86_64 | amd64 | x86)
            echo "amd64"
            ;;
        *)
            printf "Unknown architecture: %s\n" "$(uname -p)"
            exit 2
    esac
}

# download downloads a package from the upstream Apt registries.
download() {
    local pkg=$1
    apt-get download "$pkg"
}

# parse_deb fetches the package version and architecture and sets the global
# VERSION and ARCH variables.
parse_deb() {
    local pkg=$1
    VERSION="$(apt-cache show --no-all-versions "$pkg" | grep Version: | awk '{print $2}')"
    ARCH="$(arch)"
}

# unpack unpacks the package downloaded by download. It expects it name to
# include the version and architecture set by parse_deb(). The resulting files
# appear in a directory with the package name.
unpack() {
    local pkg=$1
    local deb="${pkg}_${VERSION}_${ARCH}.deb"
    dpkg-deb -R "$deb" "$pkg"
}

# copy_files copies all the .so files and symlinks and the copyright file from
# the package unpacked by unpack() into lib/ under a destination directory.
copy_files() {
    local pkg=$1
    local dest=$2

    # Copy .so files and symlinks.
    local lib="$dest/lib"
    mkdir -p "$lib"
    find "$pkg" -name '*.so.*' -exec cp --verbose --no-dereference {} "$lib/" \;

    # Copy the `copyright` file.
    local doc="$dest/doc"
    mkdir -p "$doc"
    find "$pkg" -name 'copyright' -exec cp --verbose {} "$doc/" \;
}

# add_digests creates the digests file in the destination directory.
add_digests() {
    local dest=$1
    tmp_digests="$(mktemp)"
    ( cd "$dest" && find . -type f  -exec sha512sum -b --tag {} + > "$tmp_digests" )
    mv "$tmp_digests" "$dest/digests"
}

# build creates the new .tgz file from the destination directory created by
# copy_files() and further populated add_digests().
build() {
    local dest=$1
    tar -czvf "$dest.tgz" "$dest"
}

# move moves the new debian package created by build() back to the work
# directory where repackage was originally called.
move() {
    local dest=$1
    mv "$dest.tgz" "$(dirs +1)"
}

# main executes repackage.
main() {
    local tembo_pkg upstream_pkg tmp dest
    tembo_pkg=${1-}

    # Maker sure we have the tembo package argument.
    if [ -z "$tembo_pkg" ]; then
        usage
        exit 2
    fi

    # Use the upstream package name, if passed.
    upstream_pkg=${2-"$tembo_pkg"}

    # Determine the destination package directory name.
    parse_deb "$upstream_pkg"
    dest="tembo-${tembo_pkg}_${ARCH}"

    # Switch to a temporary directory.
    tmp="$(mktemp -d)"
    chmod +777 "$tmp"
    pushd "$tmp" >/dev/null || exit
    printf "Working in %s\n" "$tmp"

    # Download the upstream and build the new package structure.
    download "$upstream_pkg"
    unpack "$upstream_pkg"
    copy_files "$upstream_pkg" "$dest"
    add_digests "$dest"

    # Build the new package and move it back to the invocation directory.
    build "$dest"
    move "$dest"

    # Return to the invocation directory.
    popd >/dev/null || exit
}

main "$@"
