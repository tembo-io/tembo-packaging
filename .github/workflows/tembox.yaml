name: ðŸš€ Tembox
on:
  push:
    branches-ignore: [wip/**]
    tags: ["**"]
  pull_request:
permissions:
  contents: write
jobs:
  release:
    name: ðŸ¦€ ${{ matrix.toolchain }} on ${{ matrix.platform.os_name }}
    runs-on:
      # https://runs-on.com/runners/linux/
      - runs-on=${{ github.run_id }}-${{ matrix.toolchain }}-${{ matrix.platform.os_name }}
      - runner=large-amd64
      - cpu=8
      - ram=16
    # https://github.com/orgs/community/discussions/57827#discussioncomment-6579237
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: linux-amd64
            target: x86_64-unknown-linux-musl
          - os_name: linux-arm64
            target: aarch64-unknown-linux-musl
        toolchain:
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy, llvm-tools
      - name: Build Binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --release"
          strip: true
      - name: Run Tests
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: test
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --release"
      - name: Get the Version
        if: env.VERSION == ''
        shell: bash
        run: echo "VERSION=$(grep "^version" Cargo.toml | sed -r 's/version[^"]+"([^"]+).*/\1/')" >> $GITHUB_ENV
      - name: Determine Archive Name
        shell: bash
        run: |
          echo "ARCHIVE=tembox-v$VERSION-${{ matrix.platform.os_name }}" >> $GITHUB_ENV
      - name: Package Archive
        shell: bash
        run: |
          printf "Packaging %s\n" "$ARCHIVE"
          mkdir "$ARCHIVE"
          cp "target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}" "$ARCHIVE"/
          cp {README.md,CHANGELOG.md,LICENSE.md} "$ARCHIVE"/
          tar czvf "$ARCHIVE.tar.gz" "$ARCHIVE"
        if: |
          matrix.toolchain == 'stable' &&
          ( startsWith( github.ref, 'refs/tags/v' ) ||
            github.ref == 'refs/tags/test-release' )
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: "${{ env.ARCHIVE }}.*"
          name: "${{ env.ARCHIVE }}"
          overwrite: true
        if: matrix.toolchain == 'stable' && github.ref == 'refs/tags/test-release'
      - name: Check the Version
        shell: bash
        run: |
          if [ "${{ github.ref_name }}" != "v$VERSION" ]; then
              printf "Cargo.toml version %s does not match tag %s\n" "$VERSION" "${{ github.ref_name }}" >&2
              exit 1
          fi
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
      - name: Generate Release Notes
        id: notes
        uses: theory/changelog-version-notes-action@v0
        with: { version: "v${{ env.VERSION }}" }
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: "Release ${{ env.VERSION }}"
          files: "tembox-*"
          body_path: ${{ steps.notes.outputs.file }}
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
